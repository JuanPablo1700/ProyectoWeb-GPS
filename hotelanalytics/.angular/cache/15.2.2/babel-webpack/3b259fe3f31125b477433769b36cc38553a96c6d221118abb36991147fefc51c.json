{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { catchError, map, of } from 'rxjs';\nexport const canActivate = (route, state) => {\n  const authService = inject();\n  const router = inject(Router);\n  return authService.checkLogin().pipe(map(() => true), catchError(() => {\n    router.navigate(['/login']);\n    return of(false);\n  }));\n};\nexport class AuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const token = localStorage.getItem('token');\n    if (token == undefined) {\n      this.router.navigate(['login']);\n    }\n    return true;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAAgDC,MAAM,QAAsC,iBAAiB;AAC7G,SAAqBC,UAAU,EAAEC,GAAG,EAAEC,EAAE,QAAQ,MAAM;AAGtD,OAAO,MAAMC,WAAW,GAAkB,CACxCC,KAA6B,EAC7BC,KAA0B,KACxB;EACF,MAAMC,WAAW,GAAGR,MAAM,EAAE;EAC5B,MAAMS,MAAM,GAAGT,MAAM,CAACC,MAAM,CAAC;EAE7B,OAAOO,WAAW,CAACE,UAAU,EAAE,CAACC,IAAI,CAClCR,GAAG,CAAC,MAAM,IAAI,CAAC,EACfD,UAAU,CAAC,MAAK;IACdO,MAAM,CAACG,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAC3B,OAAOR,EAAE,CAAC,KAAK,CAAC;EAClB,CAAC,CAAC,CACH;AACH,CAAC;AACD,OAAM,MAAOS,SAAS;EAEpBC,YACUL,MAAc;IAAd,WAAM,GAANA,MAAM;EAGhB;EAEAJ,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAExB,MAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,IAAIG,SAAS,EAAE;MACtB,IAAI,CAACT,MAAM,CAACG,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;IAEjC,OAAO,IAAI;EACf","names":["inject","Router","catchError","map","of","canActivate","route","state","authService","router","checkLogin","pipe","navigate","AuthGuard","constructor","token","localStorage","getItem","undefined"],"sourceRoot":"","sources":["C:\\Users\\Juan Pablo\\OneDrive\\Documentos\\GPS\\ProyectoWeb-GPS\\hotelanalytics\\src\\app\\utils\\auth.guard.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivateFn, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable, catchError, map, of } from 'rxjs';\r\n\r\n\r\nexport const canActivate: CanActivateFn = (\r\n  route: ActivatedRouteSnapshot,\r\n  state: RouterStateSnapshot\r\n) => {\r\n  const authService = inject();\r\n  const router = inject(Router);\r\n\r\n  return authService.checkLogin().pipe(\r\n    map(() => true),\r\n    catchError(() => {\r\n      router.navigate(['/login']);\r\n      return of(false);\r\n    })\r\n  );\r\n};\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private router: Router\r\n  ) {\r\n\r\n  }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    \r\n      const token = localStorage.getItem('token')\r\n      if (token == undefined) {\r\n        this.router.navigate(['login']);\r\n      }\r\n      return true;\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}