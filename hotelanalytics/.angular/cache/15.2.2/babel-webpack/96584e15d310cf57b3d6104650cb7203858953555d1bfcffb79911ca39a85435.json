{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet NuevohotelComponent = class NuevohotelComponent {\n  constructor(router, toastr, _newHotelService, _errorService) {\n    this.router = router;\n    this.toastr = toastr;\n    this._newHotelService = _newHotelService;\n    this._errorService = _errorService;\n    this.listHotel = [];\n    this.nombre = '';\n    this.direccion = '';\n    this.correo = '';\n    this.telefono = '';\n    this.estrellas = 0;\n    this.estado = '';\n  }\n  ngOnInit() {\n    this.getHotels();\n  }\n  validar() {\n    //falta validar selects y que sean teléfonos y correos válidos\n    if (this.nombre.trim() == '') {\n      this.toastr.error('Campo nombre obligatorio', 'Error');\n      return;\n    }\n    if (this.direccion.trim() == '') {\n      this.toastr.error('Campo direccion obligatorio', 'Error');\n      return;\n    }\n    if (this.correo.trim() == '') {\n      this.toastr.error('Campo correo obligatorio', 'Error');\n      return;\n    }\n    if (this.telefono.trim() == '') {\n      this.toastr.error('Campo teléfono obligatorio', 'Error');\n      return;\n    }\n    if (this.estrellas == -1) {\n      this.toastr.error('Campo estrellas obligatorio', 'Error');\n      return;\n    }\n    if (this.estado.trim() == '') {\n      this.toastr.error('Campo estado obligatorio', 'Error');\n      return;\n    }\n    return true;\n  }\n  insertar() {\n    this.validar();\n    const hotel = {\n      nombre: this.nombre,\n      direccion: this.direccion,\n      correo: this.correo,\n      telefono: this.telefono,\n      estrellas: this.estrellas,\n      estado: this.estado\n    };\n    this._newHotelService.newHotel(hotel).subscribe({\n      next: res => {\n        this.toastr.success('Hotel registrado correctamente', 'Correcto');\n      },\n      error: error => {\n        this._errorService.msjError(error);\n      }\n    });\n  }\n  getHotels() {\n    this._newHotelService.getHotels().subscribe({\n      next: data => {\n        this.listHotel = data;\n      },\n      error: error => {\n        this._errorService.msjError(error);\n      }\n    });\n  }\n  logOut() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('tipo_usuario');\n    this.router.navigate(['/login']);\n  }\n};\nNuevohotelComponent = __decorate([Component({\n  selector: 'app-nuevohotel',\n  templateUrl: './nuevohotel.component.html',\n  styleUrls: ['./nuevohotel.component.css']\n})], NuevohotelComponent);\nexport { NuevohotelComponent };","map":{"version":3,"mappings":"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","names":["Component","NuevohotelComponent","constructor","router","toastr","_newHotelService","_errorService","ngOnInit","getHotels","validar","nombre","trim","error","direccion","correo","telefono","estrellas","estado","insertar","hotel","newHotel","subscribe","next","res","success","msjError","data","listHotel","logOut","localStorage","removeItem","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Principales\\Documentos\\ITTEPIC\\10 Decimo\\GPS\\ProyectoWeb-GPS\\hotelanalytics\\src\\app\\components\\nuevohotel\\nuevohotel.component.ts"],"sourcesContent":["import { ToastrService } from 'ngx-toastr';\r\nimport { Router } from '@angular/router';\r\nimport { Hotel } from './../../interfaces/hotel';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { NewHotelService } from 'src/app/services/new-hotel.service';\r\nimport { ErrorService } from 'src/app/services/error.service';\r\n\r\n@Component({\r\n  selector: 'app-nuevohotel',\r\n  templateUrl: './nuevohotel.component.html',\r\n  styleUrls: ['./nuevohotel.component.css']\r\n})\r\nexport class NuevohotelComponent implements OnInit {\r\n  listHotel: Hotel[] = [];\r\n\r\n  nombre: string = '';\r\n  direccion: string = '';\r\n  correo: string = '';\r\n  telefono: string = '';\r\n  estrellas: number = 0;\r\n  estado: string = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private toastr: ToastrService,\r\n    private _newHotelService: NewHotelService,\r\n    private _errorService: ErrorService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getHotels();\r\n  }\r\n\r\n  private validar() {\r\n    //falta validar selects y que sean teléfonos y correos válidos\r\n    if (this.nombre.trim() == '') {\r\n      this.toastr.error('Campo nombre obligatorio', 'Error')\r\n      return\r\n    }\r\n    if (this.direccion.trim() == '') {\r\n      this.toastr.error('Campo direccion obligatorio', 'Error')\r\n      return\r\n    }\r\n    if (this.correo.trim() == '') {\r\n      this.toastr.error('Campo correo obligatorio', 'Error')\r\n      return\r\n    }\r\n    if (this.telefono.trim() == '') {\r\n      this.toastr.error('Campo teléfono obligatorio', 'Error')\r\n      return\r\n    }\r\n    if (this.estrellas == -1) {\r\n      this.toastr.error('Campo estrellas obligatorio', 'Error')\r\n      return\r\n    }\r\n    if (this.estado.trim() == '') {\r\n      this.toastr.error('Campo estado obligatorio', 'Error')\r\n      return\r\n    }\r\n    return true;\r\n  }\r\n\r\n  insertar() {\r\n\r\n    this.validar();\r\n\r\n    const hotel: Hotel = {\r\n      nombre: this.nombre,\r\n      direccion: this.direccion,\r\n      correo: this.correo,\r\n      telefono: this.telefono,\r\n      estrellas: this.estrellas,\r\n      estado: this.estado\r\n    }\r\n\r\n    this._newHotelService.newHotel(hotel).subscribe({\r\n      next: (res) => {\r\n        this.toastr.success('Hotel registrado correctamente', 'Correcto');\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this._errorService.msjError(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  getHotels() {\r\n    this._newHotelService.getHotels().subscribe({\r\n      next: (data) => {\r\n        this.listHotel = data;\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this._errorService.msjError(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  logOut() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('tipo_usuario');\r\n    this.router.navigate(['/login'])\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}