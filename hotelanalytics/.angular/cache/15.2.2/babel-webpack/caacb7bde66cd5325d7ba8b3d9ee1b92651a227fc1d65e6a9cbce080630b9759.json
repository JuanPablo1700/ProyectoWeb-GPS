{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/error.service\";\nimport * as i2 from \"@angular/router\";\nexport class AddTokenInterceptor {\n  constructor(_errorService, router) {\n    this._errorService = _errorService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request).pipe(catchError(error => {\n      if (error.status === 401) {\n        this._errorService.msjError(error);\n        this.router.navigate(['/login']);\n      }\n      return throwError(() => new Error('Error'));\n    }));\n  }\n}\nAddTokenInterceptor.ɵfac = function AddTokenInterceptor_Factory(t) {\n  return new (t || AddTokenInterceptor)(i0.ɵɵinject(i1.ErrorService), i0.ɵɵinject(i2.Router));\n};\nAddTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AddTokenInterceptor,\n  factory: AddTokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;AAKzD,OAAM,MAAOC,mBAAmB;EAE9BC,YACUC,aAA2B,EAC3BC,MAAc;IADd,kBAAa,GAAbD,aAAa;IACb,WAAM,GAANC,MAAM;EACb;EAEHC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIF,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QAAEC,UAAU,EAAE;UAACC,aAAa,EAAE,UAAUL,KAAK;QAAE;MAAC,CAAC,CAAC;;IAG5E,OAAOD,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC,CAACS,IAAI,CAC9BhB,UAAU,CAAEiB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAACd,aAAa,CAACe,QAAQ,CAACF,KAAK,CAAC;QAClC,IAAI,CAACZ,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAElC,OAAOnB,UAAU,CAAC,MAAM,IAAIoB,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CACH;EACH;;AAvBWnB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAoB,SAAnBpB,mBAAmB;AAAA","names":["catchError","throwError","AddTokenInterceptor","constructor","_errorService","router","intercept","request","next","token","localStorage","getItem","clone","setHeaders","Authorization","handle","pipe","error","status","msjError","navigate","Error","factory"],"sourceRoot":"","sources":["/Users/juanpablo/Documents/Escuela/GPS/ProyectoWeb-GPS/hotelanalytics/src/app/utils/add-token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { ErrorService } from '../services/error.service';\n\n@Injectable()\nexport class AddTokenInterceptor implements HttpInterceptor {\n\n  constructor(\n    private _errorService: ErrorService,\n    private router: Router\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token = localStorage.getItem('token');\n    \n    if (token) {\n      request = request.clone({ setHeaders: {Authorization: `Bearer ${token}`}})\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401) {\n          this._errorService.msjError(error);\n          this.router.navigate(['/login']);\n        }\n        return throwError(() => new Error('Error'))\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}