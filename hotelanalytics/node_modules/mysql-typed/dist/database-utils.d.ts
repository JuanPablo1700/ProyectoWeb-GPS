import { BulkFilter, FilterSubExpressions } from '@vramework/generic/dist/filter';
export declare type QueryInterface<Tables> = string | ((args: {
    sf: <N extends keyof Tables, T extends Tables[N], F extends readonly (keyof T)[]>(table: N, fields: F, alias?: string) => string;
    cf: <N extends keyof Tables, T extends Tables[N], F extends readonly (keyof T)[]>(table: N, fields: F, alias?: string) => string;
}) => string);
export declare type ValueTypes = string | number | boolean | string[] | Date | null | undefined;
export declare type Logger = {
    info: (message: string, payload?: Record<string, any>) => void;
    error: (message: string, payload?: Record<string, any>) => void;
};
export declare const getFilters: (filters: Record<string, ValueTypes> | FilterSubExpressions) => {
    limit: number;
    offset: number;
    sort: string;
    filter: string;
    filterValues: any[];
};
export declare const createBulkInsert: (bulk: Record<string, ValueTypes>[]) => [string, string, Array<string | number | null | Date>];
export declare const createInsert: (data: Record<string, number | string | null | string[] | undefined | boolean | Date>, offset?: number) => [string, string, Array<string | number | null>];
export declare const transformValues: (from: any) => Record<string, number | string | null>;
export declare const exactlyOneResult: <T>(result: T[], Err: Error) => T;
export declare const createFilters: (data: BulkFilter, freeTextFields?: string[], includeWhere?: boolean, valueOffset?: number) => {
    limit: number;
    offset: number;
    sort: string;
    filter: string;
    filterValues: any[];
};
